plugins {
//    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

apply plugin: 'war'

allprojects {

    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'com.cai'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '1.8'

    ext {
        SPRING_BOOT_VERSION = '2.2.6.RELEASE'
    }
    dependencies {
        compile fileTree(dir: 'libs')
        compile("org.springframework.boot:spring-boot-starter:$SPRING_BOOT_VERSION"){
            exclude group: "org.slf4j"
        }
        compile("org.springframework.boot:spring-boot-starter-tomcat:$SPRING_BOOT_VERSION")
        testCompile("org.springframework.boot:spring-boot-starter-test:$SPRING_BOOT_VERSION") {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        compile 'org.codehaus.groovy:groovy-all:2.3.3'

        compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.0'
        compile("org.springframework.boot:spring-boot-starter-web:$SPRING_BOOT_VERSION")
        testCompile("org.springframework.boot:spring-boot-starter-test:$SPRING_BOOT_VERSION")
        testCompile 'junit:junit'

        compile group: 'org.gradle', name: 'gradle-core', version: '3.5'
        compile group: 'com.cai', name: 'base-mongo', version: '1.0.0-releases'
        compile group: 'com.cai', name: 'base-general', version: '0.0.2.5-RELEASE'

        compile("org.springframework.boot:spring-boot-starter-aop:$SPRING_BOOT_VERSION")

    }

    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "http://47.102.222.185:30021/repository/maven-public" }
        maven { url "http://repo.spring.io/libs-release" }
        mavenLocal()
    }

    def localRepositoryPath = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "${nexusUrl}/repository/maven-releases/") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                snapshotRepository(url: "${nexusUrl}/repository/maven-snapshots/") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
            }
        }
    }

    [compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

    jar.enabled=true

    war {
        baseName = project.name
    }

    task listJars(description: 'Display all compile jars.') {
        doLast {
            configurations.compile.each { File file -> println file.name }
        }
    }

}


dependencies {
    compile project(':job-service')
    compile project(':job-controller')
    compile project(':job-base')
}

test {
    useJUnitPlatform()
}

task webAppDir{
    doLast {
        println webAppDirName
    }
}

webAppDirName = 'webfiles'

war {
    from 'static'
}
//
//task wrapperOwn (type: Wrapper){
//    distributionUrl = 'https://services.gradle.org/distributions/gradle-5.0-bin.zip'
//    distributionPath = 'gradle-dists'
//}
//
//wrapper.dependsOn wrapperOwn

ext{
    versionFile = file('version.properties')
    versionProperties = new Properties()
}

task loadVersion {
    println readVersion()
    project.version = readVersion()
}


String readVersion(){

    versionFile.withInputStream {stream->
        versionProperties.load(stream)
    }
    versionProperties.remove('--')
    return "${versionProperties.major}.${versionProperties.minor}${Boolean.valueOf(versionProperties.release as String) ? '' : '-SNAPSHOT'}"
}

//uploadArchives.dependsOn loadVersion

//
//task createDistribution(type: Zip){
//    from war.outputs.files
//
//    from(sourceSets*.allSource){
//        into 'src'
//    }
//
//    from(rootDir){
//        include versionFile.name
//    }
//}
//
//
//task backupReleaseDistribution(type: Copy){
//    from createDistribution.outputs.files
//    into "$buildDir/backup"
//}
//
//task release(dependsOn: backupReleaseDistribution){
//    doLast {
//        logger.quiet 'release the project'
//    }
//}

ext.subJar = []

subprojects {

    task toJar(type: Jar){
        from projectDir
    }

    task backupReleaseDistribution(type: Copy){
//        from war.outputs.files
        from toJar.outputs.files
        subJar.add "$parent.buildDir/backup/${toJar.outputs.files[0].name}"
        into "$parent.buildDir/backup"
    }

}


//task toWar(type: War){
//    manifest {
//        attributes.put('Class-Path', configurations.compile.collect { it.getName() }.join(' '))
//        attributes.put('Main-Class','com.cai.JobSchedulerApplication')
//    }
//    subJar.each {file->
//        classpath.toList().add(files(file)[0])
//    }
//}


gradle.taskGraph.whenReady {TaskExecutionGraph graph->
    if (graph.hasTask('release')){
        if (!version.release){
            version.release = true
            Properties properties = new Properties()
            properties.load(versionFile.newReader('utf-8'))
            properties.setProperty('release','true')
            versionFile.delete()
            versionFile.withWriter {writer->
                properties.store(writer,null)
            }
        }
    }
}

